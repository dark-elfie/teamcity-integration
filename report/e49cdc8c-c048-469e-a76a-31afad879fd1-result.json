{"name": "Przekierowanie awizacji", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=93.0.4577.82)", "trace": "self = <tests.advices_test.TestAdvices object at 0x000001C4B5FEC730>\n\n    @allure.title(\"Przekierowanie awizacji\")\n    def test_redirect_advice(self):\n        CreatingFunctions.create_aw(self.driver, AWData.receiver, AWData.receiver_contact, AWData.receiver_address,\n                                    AWData.deliverer, AWData.deliverer_contact, AWData.deliverer_address,\n                                    AWData.loading_date, AWData.loading_time_from, AWData.loading_time_to,\n                                    AWData.delivery_date, AWData.delivery_time_from, AWData.delivery_time_to,\n                                    AWData.vehicle_number, AWData.driver_name, AWData.driver_last_name, AWData.id_type,\n                                    AWData.id_number, AWData.driver_phone, AWData.price_per_tone)\n        advice_page = AdvicePage(self.driver)\n        time.sleep(0.5)\n        if self.driver.title == \"Awizacje | Agrii TMS\":\n            advice_page.get_into_aw()\n        first_advice = advice_page.get_advice_number()\n    \n        side_bar = SideBar(self.driver)\n        advice_page.go_to_redirect_advice()\n        advice_page.redirect_advice(\"Anulowana\")\n        advice_page.redirect_add_note(\"Transakcja anulowana\")\n        advice_page.go_to_new_advice()\n        advice_page.go_to_carriage()\n        time.sleep(1.5)\n        advice_page.go_to_summary()\n>       advice_page.save()\n\ntests\\advices_test.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\advices_page.py:494: in save\n    self.driver.find_element_by_xpath(self.save_button).click()\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C4B5FDE820>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77DD7A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77DD7A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=93.0.4577.82)\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: ElementNotInteractableException"}, "steps": [{"name": "Przejdz do 'Awizacje'", "status": "passed", "start": 1632747248570, "stop": 1632747248703}, {"name": "Dodawanie awizacji", "status": "passed", "start": 1632747248703, "stop": 1632747251106}, {"name": "Dodawanie odbiorcy", "status": "passed", "parameters": [{"name": "receiver_input", "value": "'Wytwórnia Pasz Lira Sp. z o.o.'"}, {"name": "receiver_contact", "value": "'Karol Karolczyk - karolczyk@aaaaaaa.pl'"}, {"name": "receiver_address", "value": "'64-010 , Krzywiń , Gen.Chłapowskiego 36'"}], "start": 1632747251106, "stop": 1632747252925}, {"name": "Dodawanie nadawcy", "status": "passed", "parameters": [{"name": "deliverer_input", "value": "'GR Cudak Mariusz'"}, {"name": "deliverer_contact", "value": "'Kamil Kamilak - kamilak@bbbbb.pl'"}, {"name": "deliverer_address", "value": "'67-300 , Długie , Długie 95'"}], "start": 1632747252925, "stop": 1632747254490}, {"name": "Przejscie do nastepnej strony (dane przewoznika)", "status": "passed", "start": 1632747254490, "stop": 1632747254561}, {"name": "Dodawanie przewoznika", "status": "passed", "start": 1632747254561, "stop": 1632747255584}, {"name": "Dodawanie danych przewozu", "status": "passed", "parameters": [{"name": "loading_date", "value": "'2022-12-01'"}, {"name": "loading_time_from", "value": "'12:00'"}, {"name": "loading_time_to", "value": "'13:00'"}, {"name": "delivery_date", "value": "'2022-12-02'"}, {"name": "delivery_time_from", "value": "'12:00'"}, {"name": "delivery_time_to", "value": "'13:00'"}, {"name": "vehicle_number", "value": "'123456'"}, {"name": "driver_name", "value": "'Jan'"}, {"name": "driver_last_name", "value": "'Nowak'"}, {"name": "id_type", "value": "'paszport'"}, {"name": "id_number", "value": "'pl1234'"}, {"name": "driver_phone", "value": "'789456123'"}, {"name": "price_per_ton", "value": "25"}], "start": 1632747255584, "stop": 1632747257858}, {"name": "Przejscie do nastepnej strony (podsumowanie)", "status": "passed", "start": 1632747257858, "stop": 1632747257960}, {"name": "Walidacja danych w podsumowaniu", "status": "passed", "parameters": [{"name": "receiver_input", "value": "'Wytwórnia Pasz Lira Sp. z o.o.'"}, {"name": "deliverer_input", "value": "'GR Cudak Mariusz'"}, {"name": "loading_date", "value": "'2022-12-01'"}, {"name": "loading_time_from", "value": "'12:00'"}, {"name": "loading_time_to", "value": "'13:00'"}, {"name": "delivery_date", "value": "'2022-12-02'"}, {"name": "delivery_time_from", "value": "'12:00'"}, {"name": "delivery_time_to", "value": "'13:00'"}, {"name": "vehicle_number", "value": "'123456'"}, {"name": "driver_name", "value": "'Jan'"}, {"name": "driver_last_name", "value": "'Nowak'"}, {"name": "id_type", "value": "'paszport'"}, {"name": "id_number", "value": "'pl1234'"}, {"name": "driver_phone", "value": "'789456123'"}, {"name": "price_per_ton", "value": "25"}], "start": 1632747257960, "stop": 1632747258724}, {"name": "Zapisanie awizacji", "status": "passed", "start": 1632747258724, "stop": 1632747260859}, {"name": "Wejscie w pojedyncza awizacje", "status": "passed", "start": 1632747261379, "stop": 1632747261482}, {"name": "Pobranie numeru utworzonej AW", "status": "passed", "start": 1632747261483, "stop": 1632747261913}, {"name": "Przejscie do przekierowania awizacji", "status": "passed", "start": 1632747261913, "stop": 1632747262392}, {"name": "Przekierowanie awizacji", "status": "passed", "parameters": [{"name": "status", "value": "'Anulowana'"}], "start": 1632747262392, "stop": 1632747262870}, {"name": "Dodanie notatki do przekierowania aw", "status": "passed", "parameters": [{"name": "note", "value": "'Transakcja anulowana'"}], "start": 1632747262870, "stop": 1632747262989}, {"name": "Przejscie do tworzenia nowej aw", "status": "passed", "start": 1632747262989, "stop": 1632747263059}, {"name": "Przejscie do nastepnej strony (dane przewoznika)", "status": "passed", "start": 1632747263059, "stop": 1632747264111}, {"name": "Przejscie do nastepnej strony (podsumowanie)", "status": "passed", "start": 1632747265612, "stop": 1632747265654}, {"name": "Zapisanie awizacji", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=93.0.4577.82)\n\n", "trace": "  File \"c:\\users\\sara\\pycharmprojects\\tms_testy\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\Sara\\PycharmProjects\\TMS_testy\\pages\\advices_page.py\", line 494, in save\n    self.driver.find_element_by_xpath(self.save_button).click()\n  File \"c:\\users\\sara\\pycharmprojects\\tms_testy\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 80, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"c:\\users\\sara\\pycharmprojects\\tms_testy\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 633, in _execute\n    return self._parent.execute(command, params)\n  File \"c:\\users\\sara\\pycharmprojects\\tms_testy\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"c:\\users\\sara\\pycharmprojects\\tms_testy\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1632747265655, "stop": 1632747280735}], "attachments": [{"name": "log", "source": "0a2549dc-d52b-4ba1-9966-80ebd8389073-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "a8e56bbc-b80a-402c-a3b4-d83d8b4d5bc3-attachment.txt", "type": "text/plain"}], "start": 1632747248570, "stop": 1632747280740, "uuid": "37b1d4cf-0d10-4426-af59-9239e9460c3f", "historyId": "1fca1a39c66534cf55f1658b53884fb1", "testCaseId": "9b99d6590b3db5d93fffafcc0a557761", "fullName": "tests.advices_test.TestAdvices#test_redirect_advice", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('log_in_admin')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "advices_test"}, {"name": "subSuite", "value": "TestAdvices"}, {"name": "host", "value": "DESKTOP-LSRI7PH"}, {"name": "thread", "value": "996-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.advices_test"}]}